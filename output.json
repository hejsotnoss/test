[["0110nnnnmmmm0011","BOTH","mov\tRm,Rn","Rm -> Rn"],["1110nnnniiiiiiii","BOTH","mov\t#imm,Rn","imm -> sign extension -> Rn"],["11000111dddddddd","BOTH","mova\t@(disp,PC),R0","(disp*4) + (PC & 0xFFFFFFFC) + 4 -> R0"],["1001nnnndddddddd","BOTH","mov.w\t@(disp,PC),Rn","(disp*2 + PC + 4) -> sign extension -> Rn"],["1101nnnndddddddd","BOTH","mov.l\t@(disp,PC),Rn","(disp*4 + (PC & 0xFFFFFFFC) + 4) -> sign extension -> Rn"],["0110nnnnmmmm0000","BOTH","mov.b\t@Rm,Rn","(Rm) -> sign extension -> Rn"],["0110nnnnmmmm0001","BOTH","mov.w\t@Rm,Rn","(Rm) -> sign extension -> Rn"],["0110nnnnmmmm0010","BOTH","mov.l\t@Rm,Rn","(Rm) -> Rn"],["0010nnnnmmmm0000","BOTH","mov.b\tRm,@Rn","Rm -> (Rn)"],["0010nnnnmmmm0001","BOTH","mov.w\tRm,@Rn","Rm -> (Rn)"],["0010nnnnmmmm0010","BOTH","mov.l\tRm,@Rn","Rm -> (Rn)"],["0110nnnnmmmm0100","BOTH","mov.b\t@Rm+,Rn","(Rm) -> sign extension -> Rn, Rm+1 -> Rm"],["0110nnnnmmmm0101","BOTH","mov.w\t@Rm+,Rn","(Rm) -> sign extension -> Rn, Rm+2 -> Rm"],["0110nnnnmmmm0110","BOTH","mov.l\t@Rm+,Rn","(Rm) -> Rn, Rm+4 -> Rm"],["0010nnnnmmmm0100","BOTH","mov.b\tRm,@-Rn","Rn-1 -> Rn, Rm -> (Rn)"],["0010nnnnmmmm0101","BOTH","mov.w\tRm,@-Rn","Rn-2 -> Rn, Rm -> (Rn)"],["0010nnnnmmmm0110","BOTH","mov.l\tRm,@-Rn","Rn-4 -> Rn, Rm -> (Rn)"],["10000100mmmmdddd","BOTH","mov.b\t@(disp,Rm),R0","(disp + Rm) -> sign extension -> R0"],["10000101mmmmdddd","BOTH","mov.w\t@(disp,Rm),R0","(disp*2 + Rm) -> sign extension -> R0"],["0101nnnnmmmmdddd","BOTH","mov.l\t@(disp,Rm),Rn","(disp*4 + Rm) -> Rn"],["10000000nnnndddd","BOTH","mov.b\tR0,@(disp,Rn)","R0 -> (disp + Rn)"],["10000001nnnndddd","BOTH","mov.w\tR0,@(disp,Rn)","R0 -> (disp*2 + Rn)"],["0001nnnnmmmmdddd","BOTH","mov.l\tRm,@(disp,Rn)","Rm -> (disp*4 + Rn)"],["0000nnnnmmmm1100","BOTH","mov.b\t@(R0,Rm),Rn","(R0 + Rm) -> sign extension -> Rn"],["0000nnnnmmmm1101","BOTH","mov.w\t@(R0,Rm),Rn","(R0 + Rm) -> sign extension -> Rn"],["0000nnnnmmmm1110","BOTH","mov.l\t@(R0,Rm),Rn","(R0 + Rm) -> Rn"],["0000nnnnmmmm0100","BOTH","mov.b\tRm,@(R0,Rn)","Rm -> (R0 + Rn)"],["0000nnnnmmmm0101","BOTH","mov.w\tRm,@(R0,Rn)","Rm -> (R0 + Rn)"],["0000nnnnmmmm0110","BOTH","mov.l\tRm,@(R0,Rn)","Rm -> (R0 + Rn)"],["11000100dddddddd","BOTH","mov.b\t@(disp,GBR),R0","(disp + GBR) -> sign extension -> R0"],["11000101dddddddd","BOTH","mov.w\t@(disp,GBR),R0","(disp*2 + GBR) -> sign extension -> R0"],["11000110dddddddd","BOTH","mov.l\t@(disp,GBR),R0","(disp*4 + GBR) -> R0"],["11000000dddddddd","BOTH","mov.b\tR0,@(disp,GBR)","R0 -> (disp + GBR)"],["11000001dddddddd","BOTH","mov.w\tR0,@(disp,GBR)","R0 -> (disp*2 + GBR)"],["11000010dddddddd","BOTH","mov.l\tR0,@(disp,GBR)","R0 -> (disp*4 + GBR)"],["0000nnnn01110011","SH4A","movco.l\tR0,@Rn","LDST -> T\nIf (T == 1): R0 -> Rn\n0 -> LDST"],["0000mmmm01100011","SH4A","movli.l\t@Rm,R0","1 -> LDST\n(Rm) -> R0\nWhen interrupt/exception occured: 0 -> LDST"],["0100mmmm10101001","SH4A","movua.l\t@Rm,R0","(Rm) -> R0\nLoad non-boundary alignment data"],["0100mmmm11101001","SH4A","movua.l\t@Rm+,R0","(Rm) -> R0, Rm + 4 -> Rm\nLoad non-boundary alignment data"],["0000nnnn00101001","BOTH","movt\tRn","T -> Rn"],["0110nnnnmmmm1000","BOTH","swap.b\tRm,Rn","Rm -> swap lower 2 bytes -> Rn"],["0110nnnnmmmm1001","BOTH","swap.w\tRm,Rn","Rm -> swap upper/lower words -> Rn"],["0010nnnnmmmm1101","BOTH","xtrct\tRm,Rn","Rm:Rn middle 32 bits -> Rn"],["0011nnnnmmmm1100","BOTH","add\tRm,Rn","Rn + Rm -> Rn"],["0111nnnniiiiiiii","BOTH","add\t#imm,Rn","Rn + (sign extension)imm"],["0011nnnnmmmm1110","BOTH","addc\tRm,Rn","Rn + Rm + T -> Rn, carry -> T"],["0011nnnnmmmm1111","BOTH","addv\tRm,Rn","Rn + Rm -> Rn, overflow -> T"],["10001000iiiiiiii","BOTH","cmp/eq\t#imm,R0","If R0 = (sign extension)imm: 1 -> T\nElse: 0 -> T"],["0011nnnnmmmm0000","BOTH","cmp/eq\tRm,Rn","If Rn = Rm: 1 -> T\nElse: 0 -> T"],["0011nnnnmmmm0010","BOTH","cmp/hs\tRm,Rn","If Rn >= Rm (unsigned): 1 -> T\nElse: 0 -> T"],["0011nnnnmmmm0011","BOTH","cmp/ge\tRm,Rn","If Rn >= Rm (signed): 1 -> T\nElse: 0 -> T"],["0011nnnnmmmm0110","BOTH","cmp/hi\tRm,Rn","If Rn > Rm (unsigned): 1 -> T\nElse: 0 -> T"],["0011nnnnmmmm0111","BOTH","cmp/gt\tRm,Rn","If Rn > Rm (signed): 1 -> T\nElse: 0 -> T"],["0100nnnn00010101","BOTH","cmp/pl\tRn","If Rn > 0 (signed): 1 -> T\nElse: 0 -> T"],["0100nnnn00010001","BOTH","cmp/pz\tRn","If Rn >= 0 (signed): 1 -> T\nElse: 0 -> T"],["0010nnnnmmmm1100","BOTH","cmp/str\tRm,Rn","If Rn and Rm have an equal byte: 1 -> T\nElse: 0 -> T"],["0010nnnnmmmm0111","BOTH","div0s\tRm,Rn","MSB of Rn -> Q, MSB of Rm -> M, M ^ Q -> T"],["0000000000011001","BOTH","div0u","0 -> M, 0 -> Q, 0 -> T"],["0011nnnnmmmm0100","BOTH","div1\tRm,Rn","1-step division (Rn / Rm)"],["0011nnnnmmmm1101","BOTH","dmuls.l\tRm,Rn","Signed, Rn * Rm -> MACH:MACL\n32 * 32 -> 64 bits"],["0011nnnnmmmm0101","BOTH","dmulu.l\tRm,Rn","Unsigned, Rn * Rm -> MACH:MACL\n32 * 32 -> 64 bits"],["0100nnnn00010000","BOTH","dt\tRn","Rn-1 -> Rn\nIf Rn = 0: 1 -> T\nElse: 0 -> T"],["0110nnnnmmmm1110","BOTH","exts.b\tRm,Rn","Rm sign-extended from byte -> Rn"],["0110nnnnmmmm1111","BOTH","exts.w\tRm,Rn","Rm sign-extended from word -> Rn"],["0110nnnnmmmm1100","BOTH","extu.b\tRm,Rn","Rm zero-extended from byte -> Rn"],["0110nnnnmmmm1101","BOTH","extu.w\tRm,Rn","Rm zero-extended from word -> Rn"],["0000nnnnmmmm1111","BOTH","mac.l\t@Rm+,@Rn+","Signed, (Rn) * (Rm) + MAC -> MAC\n32 * 32 + 64 -> 64 bits"],["0100nnnnmmmm1111","BOTH","mac.w\t@Rm+,@Rn+","Signed, (Rn) * (Rm) + MAC -> MAC\nSH1: 16 * 16 + 42 -> 42 bits\nOther: 16 * 16 + 64 -> 64 bits"],["0000nnnnmmmm0111","BOTH","mul.l\tRm,Rn","Rn * Rm -> MACL\n32 * 32 -> 32 bits"],["0010nnnnmmmm1111","BOTH","muls.w\tRm,Rn","Signed, Rn * Rm -> MACL\n16 * 16 -> 32 bits"],["0010nnnnmmmm1110","BOTH","mulu.w\tRm,Rn","Unsigned, Rn * Rm -> MACL\n16 * 16 -> 32 bits"],["0110nnnnmmmm1011","BOTH","neg\tRm,Rn","0 - Rm -> Rn"],["0110nnnnmmmm1010","BOTH","negc\tRm,Rn","0 - Rm - T -> Rn, borrow -> T"],["0011nnnnmmmm1000","BOTH","sub\tRm,Rn","Rn - Rm -> Rn"],["0011nnnnmmmm1010","BOTH","subc\tRm,Rn","Rn - Rm - T -> Rn, borrow -> T"],["0011nnnnmmmm1011","BOTH","subv\tRm,Rn","Rn - Rm -> Rn, underflow -> T"],["0010nnnnmmmm1001","BOTH","and\tRm,Rn","Rn & Rm -> Rn"],["11001001iiiiiiii","BOTH","and\t#imm,R0","R0 & (zero extend)imm -> R0"],["11001101iiiiiiii","BOTH","and.b\t#imm,@(R0,GBR)","(R0 + GBR) & (zero extend)imm -> (R0 + GBR)"],["0110nnnnmmmm0111","BOTH","not\tRm,Rn","~Rm -> Rn"],["0010nnnnmmmm1011","BOTH","or\tRm,Rn","Rn | Rm -> Rn"],["11001011iiiiiiii","BOTH","or\t#imm,R0","R0 | (zero extend)imm -> R0"],["11001111iiiiiiii","BOTH","or.b\t#imm,@(R0,GBR)","(R0 + GBR) | (zero extend)imm -> (R0 + GBR)"],["0100nnnn00011011","BOTH","tas.b\t@Rn","If (Rn) = 0: 1 -> T\nElse: 0 -> T\n1 -> MSB of (Rn)"],["0010nnnnmmmm1000","BOTH","tst\tRm,Rn","If Rn & Rm = 0: 1 -> T\nElse: 0 -> T"],["11001000iiiiiiii","BOTH","tst\t#imm,R0","If R0 & (zero extend)imm = 0: 1 -> T\nElse: 0 -> T"],["11001100iiiiiiii","BOTH","tst.b\t#imm,@(R0,GBR)","If (R0 + GBR) & (zero extend)imm = 0: 1 -> T\nElse 0: -> T"],["0010nnnnmmmm1010","BOTH","xor\tRm,Rn","Rn ^ Rm -> Rn"],["11001010iiiiiiii","BOTH","xor\t#imm,R0","R0 ^ (zero extend)imm -> R0"],["11001110iiiiiiii","BOTH","xor.b\t#imm,@(R0,GBR)","(R0 + GBR) ^ (zero extend)imm -> (R0 + GBR)"],["0100nnnn00100100","BOTH","rotcl\tRn","T << Rn << T"],["0100nnnn00100101","BOTH","rotcr\tRn","T >> Rn >> T"],["0100nnnn00000100","BOTH","rotl\tRn","T << Rn << MSB"],["0100nnnn00000101","BOTH","rotr\tRn","LSB >> Rn >> T"],["0100nnnnmmmm1100","BOTH","shad\tRm,Rn","If Rm >= 0: Rn << Rm -> Rn\nIf Rm < 0: Rn >> |Rm| -> [MSB -> Rn]"],["0100nnnn00100000","BOTH","shal\tRn","T << Rn << 0"],["0100nnnn00100001","BOTH","shar\tRn","MSB >> Rn >> T"],["0100nnnnmmmm1101","BOTH","shld\tRm,Rn","If Rm >= 0: Rn << Rm -> Rn\nIf Rm < 0: Rn >> |Rm| -> [0 -> Rn]"],["0100nnnn00000000","BOTH","shll\tRn","T << Rn << 0"],["0100nnnn00001000","BOTH","shll2\tRn","Rn << 2 -> Rn"],["0100nnnn00011000","BOTH","shll8\tRn","Rn << 8 -> Rn"],["0100nnnn00101000","BOTH","shll16\tRn","Rn << 16 -> Rn"],["0100nnnn00000001","BOTH","shlr\tRn","0 >> Rn >> T"],["0100nnnn00001001","BOTH","shlr2\tRn","Rn >> 2 -> [0 -> Rn]"],["0100nnnn00011001","BOTH","shlr8\tRn","Rn >> 8 -> [0 -> Rn]"],["0100nnnn00101001","BOTH","shlr16\tRn","Rn >> 16 -> [0 -> Rn]"],["10001011dddddddd","BOTH","bf\tlabel","If T = 0: disp*2 + PC + 4 -> PC\nElse: nop"],["10001111dddddddd","BOTH","bf/s\tlabel","If T = 0: disp*2 + PC + 4 -> PC\nElse: nop\n(Delayed branch)"],["10001001dddddddd","BOTH","bt\tlabel","If T = 1: disp*2 + PC + 4 -> PC\nElse: nop"],["10001101dddddddd","BOTH","bt/s\tlabel","If T = 1: disp*2 + PC + 4 -> PC\nElse: nop\n(Delayed branch)"],["1010dddddddddddd","BOTH","bra\tlabel","disp*2 + PC + 4 -> PC\n(Delayed branch)"],["0000mmmm00100011","BOTH","braf\tRm","Rm + PC + 4 -> PC\n(Delayed branch)"],["1011dddddddddddd","BOTH","bsr\tlabel","PC + 4 -> PR, disp*2 + PC + 4 -> PC\n(Delayed branch)"],["0000mmmm00000011","BOTH","bsrf\tRm","PC + 4 -> PR, Rm + PC + 4 -> PC\n(Delayed branch)"],["0100mmmm00101011","BOTH","jmp\t@Rm","Rm -> PC\n(Delayed branch)"],["0100mmmm00001011","BOTH","jsr\t@Rm","PC + 4 -> PR, Rm -> PC\n(Delayed branch)"],["0000000000001011","BOTH","rts","PR -> PC\nDelayed branch"],["0000000000101000","BOTH","clrmac","0 -> MACH, 0 -> MACL"],["0000000001001000","BOTH","clrs","0 -> S"],["0000000000001000","BOTH","clrt","0 -> T"],["0000nnnn11100011","SH4A","icbi\t@Rn","Invalidate instruction cache block indicated by logical address"],["0100mmmm00001110","BOTH","ldc\tRm,SR","Rm -> SR"],["0100mmmm00000111","BOTH","ldc.l\t@Rm+,SR","(Rm) -> SR, Rm+4 -> Rm"],["0100mmmm00011110","BOTH","ldc\tRm,GBR","Rm -> GBR"],["0100mmmm00010111","BOTH","ldc.l\t@Rm+,GBR","(Rm) -> GBR, Rm+4 -> Rm"],["0100mmmm00101110","BOTH","ldc\tRm,VBR","Rm -> VBR"],["0100mmmm00100111","BOTH","ldc.l\t@Rm+,VBR","(Rm) -> VBR, Rm+4 -> Rm"],["0100mmmm00111010","SH4A","ldc\tRm,SGR","Rm -> SGR"],["0100mmmm00110110","SH4A","ldc.l\t@Rm+,SGR","(Rm) -> SGR, Rm+4 -> Rm"],["0100mmmm00111110","BOTH","ldc\tRm,SSR","Rm -> SSR"],["0100mmmm00110111","BOTH","ldc.l\t@Rm+,SSR","(Rm) -> SSR, Rm+4 -> Rm"],["0100mmmm01001110","BOTH","ldc\tRm,SPC","Rm -> SPC"],["0100mmmm01000111","BOTH","ldc.l\t@Rm+,SPC","(Rm) -> SPC, Rm+4 -> Rm"],["0100mmmm11111010","SH4A","ldc\tRm,DBR","Rm -> DBR"],["0100mmmm11110110","SH4A","ldc.l\t@Rm+,DBR","(Rm) -> DBR, Rm+4 -> Rm"],["0100mmmm1nnn1110","BOTH","ldc\tRm,Rn_BANK","Rm -> Rn_BANK (n = 0-7)"],["0100mmmm1nnn0111","BOTH","ldc.l\t@Rm+,Rn_BANK","(Rm) -> Rn_BANK, Rm+4 -> Rm"],["0100mmmm00001010","BOTH","lds\tRm,MACH","Rm -> MACH"],["0100mmmm00000110","BOTH","lds.l\t@Rm+,MACH","(Rm) -> MACH, Rm+4 -> Rm"],["0100mmmm00011010","BOTH","lds\tRm,MACL","Rm -> MACL"],["0100mmmm00010110","BOTH","lds.l\t@Rm+,MACL","(Rm) -> MACL, Rm+4 -> Rm"],["0100mmmm00101010","BOTH","lds\tRm,PR","Rm -> PR"],["0100mmmm00100110","BOTH","lds.l\t@Rm+,PR","(Rm) -> PR, Rm+4 -> Rm"],["0000000000111000","BOTH","ldtlb","PTEH/PTEL -> TLB"],["0000nnnn11000011","SH4A","movca.l\tR0,@Rn","R0 -> (Rn) (without fetching cache block)"],["0000000000001001","BOTH","nop","No operation"],["0000nnnn10010011","SH4A","ocbi\t@Rn","Invalidate operand cache block"],["0000nnnn10100011","SH4A","ocbp\t@Rn","Write back and invalidate operand cache block"],["0000nnnn10110011","SH4A","ocbwb\t@Rn","Write back operand cache block"],["0000nnnn10000011","BOTH","pref\t@Rn","(Rn) -> operand cache"],["0000nnnn11010011","SH4A","prefi\t@Rn","Reads 32-byte instruction block into instruction cache"],["0000000000101011","BOTH","rte","Delayed branch\nSH1*,SH2*: stack area -> PC/SR\nSH3*,SH4*: SSR/SPC -> SR/PC"],["0000000001011000","BOTH","sets","1 -> S"],["0000000000011000","BOTH","sett","1 -> T"],["0000000000011011","BOTH","sleep","Sleep or standby"],["0000nnnn00000010","BOTH","stc\tSR,Rn","SR -> Rn"],["0100nnnn00000011","BOTH","stc.l\tSR,@-Rn","Rn-4 -> Rn, SR -> (Rn)"],["0000nnnn00010010","BOTH","stc\tGBR,Rn","GBR -> Rn"],["0100nnnn00010011","BOTH","stc.l\tGBR,@-Rn","Rn-4 -> Rn, GBR -> (Rn)"],["0000nnnn00100010","BOTH","stc\tVBR,Rn","VBR -> Rn"],["0100nnnn00100011","BOTH","stc.l\tVBR,@-Rn","Rn-4 -> Rn, VBR -> (Rn)"],["0000nnnn00111010","SH4A","stc\tSGR,Rn","SGR -> Rn"],["0100nnnn00110010","SH4A","stc.l\tSGR,@-Rn","Rn-4 -> Rn, SGR -> (Rn)"],["0000nnnn00110010","BOTH","stc\tSSR,Rn","SSR -> Rn"],["0100nnnn00110011","BOTH","stc.l\tSSR,@-Rn","Rn-4 -> Rn, SSR -> (Rn)"],["0000nnnn01000010","BOTH","stc\tSPC,Rn","SPC -> Rn"],["0100nnnn01000011","BOTH","stc.l\tSPC,@-Rn","Rn-4 -> Rn, SPC -> (Rn)"],["0000nnnn11111010","SH4A","stc\tDBR,Rn","DBR -> Rn"],["0100nnnn11110010","SH4A","stc.l\tDBR,@-Rn","Rn-4 -> Rn, DBR -> (Rn)"],["0000nnnn1mmm0010","BOTH","stc\tRm_BANK,Rn","Rm_BANK -> Rn (m = 0-7)"],["0100nnnn1mmm0011","BOTH","stc.l\tRm_BANK,@-Rn","Rn-4 -> Rn, Rm_BANK -> (Rn) (m = 0-7)"],["0000nnnn00001010","BOTH","sts\tMACH,Rn","MACH -> Rn"],["0100nnnn00000010","BOTH","sts.l\tMACH,@-Rn","Rn-4 -> Rn, MACH -> (Rn)"],["0000nnnn00011010","BOTH","sts\tMACL,Rn","MACL -> Rn"],["0100nnnn00010010","BOTH","sts.l\tMACL,@-Rn","Rn-4 -> Rn, MACL -> (Rn)"],["0000nnnn00101010","BOTH","sts\tPR,Rn","PR -> Rn"],["0100nnnn00100010","BOTH","sts.l\tPR,@-Rn","Rn-4 -> Rn, PR -> (Rn)"],["0000000010101011","SH4A","synco","Prevents the next instruction from being issued until instructions issued before this instruction has been completed."],["11000011iiiiiiii","BOTH","trapa\t#imm","SH1*,SH2*: PC/SR -> stack area, (imm*4 + VBR) -> PC\nSH3*,SH4*: PC/SR -> SPC/SSR, imm*4 -> TRA, 0x160 -> EXPEVT, VBR + 0x0100 -> PC"]]